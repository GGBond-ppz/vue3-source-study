{
  "version": 3,
  "sources": ["../src/index.ts", "../src/runtimeHelpers.ts", "../src/ast.ts", "../src/generate.ts", "../src/parse.ts", "../src/transforms/transformElement.ts", "../src/transforms/transformExpression.ts", "../../shared/src/index.ts", "../src/transforms/transformText.ts", "../src/transform.ts"],
  "sourcesContent": ["import { generate } from \"./generate\";\r\nimport { parse } from \"./parse\";\r\nimport { transform } from \"./transform\";\r\n\r\nexport function compile(template) {\r\n  // \u7F16\u8BD1\u539F\u7406\uFF0C\u5C06html\u8BED\u6CD5\u8F6C\u6362\u4E3Ajs\u8BED\u6CD5\r\n  // 1. \u5C06\u6A21\u677F\u8F6C\u6362\u4E3A\u62BD\u8C61\u8BED\u6CD5\u6811\r\n  const ast = parse(template);\r\n  // 2. \u5BF9ast\u8BED\u6CD5\u6811\u8FDB\u884C\u4E00\u4E9B\u9884\u5148\u5904\u7406\r\n  // \u8FD9\u91CC\u8F6C\u5316\uFF0C\u8981\u8FDB\u884C\u6536\u96C6\u6240\u9700\u7684\u65B9\u6CD5 createElementVnode toDisplayString...\r\n  // codegen \u4E3A\u4E86\u751F\u6210\u4EE3\u7801\u7684\u65F6\u5019\u66F4\u65B9\u4FBF\uFF0C\u5728\u8F6C\u5316\u8FC7\u7A0B\u4E2D\u4F1A\u751F\u6210\u8FD9\u6837\u4E00\u4E2A\u5C5E\u6027\r\n  transform(ast);\r\n  // // \u751F\u6210\u4EE3\u7801\r\n  return generate(ast);\r\n}\r\n", "export const TO_DISPLAY_STRING = Symbol(\"toDisplayString\");\r\nexport const CREATE_TEXT = Symbol(\"createTextVNode\");\r\nexport const CREATE_ELEMENT_VNODE = Symbol(\"createElementVNode\");\r\nexport const OPEN_BLOCK = Symbol(\"openBlock\");\r\nexport const CREATE_ELEMENT_BLOCK = Symbol(\"createElementBlock\");\r\nexport const FRAGMENT = Symbol(\"fragment\");\r\n\r\nexport const helperMap = {\r\n  [TO_DISPLAY_STRING]: \"toDisplayString\",\r\n  [CREATE_TEXT]: \"createTextVNode\",\r\n  [CREATE_ELEMENT_VNODE]: \"createElementVNode\",\r\n  [OPEN_BLOCK]: \"openBlock\",\r\n  [CREATE_ELEMENT_BLOCK]: \"createElementBlock\",\r\n  [FRAGMENT]: \"fragment\",\r\n};\r\n", "import { CREATE_ELEMENT_VNODE, CREATE_TEXT } from \"./runtimeHelpers\";\r\n\r\nexport enum NodeTypes {\r\n  ROOT, // \u6839\u8282\u70B9\r\n  ELEMENT, // \u5143\u7D20\r\n  TEXT, // \u6587\u672C\r\n  COMMENT, // \u6CE8\u91CA\r\n  SIMPLE_EXPRESSION, // \u7B80\u5355\u8868\u8FBE\u5F0F a :a=\"aaa\"\r\n  INTERPOLATION, // \u6A21\u677F\u8868\u8FBE\u5F0F {{a}}\r\n  ATTRIBUTE,\r\n  DIRECTIVE,\r\n  // containers\r\n  COMPOUND_EXPRESSION, // \u7B26\u5408\u8868\u8FBE\u5F0F {{aaa}} bbb\r\n  IF,\r\n  IF_BRANCH,\r\n  FOR,\r\n  TEXT_CALL, // \u6587\u672C\u8C03\u7528\r\n  // codegen\r\n  VNODE_CALL, // \u6587\u672C\u8C03\u7528\r\n  JS_CALL_EXPRESSION, // js\u8C03\u7528\u8868\u8FBE\u5F0F\r\n  JS_OBJECT_EXPRESSION,\r\n  JS_PROPERTY,\r\n  JS_ARRAY_EXPRESSION,\r\n  JS_FUNCTION_EXPRESSION,\r\n  JS_CONDITIONAL_EXPRESSION,\r\n  JS_CACHE_EXPRESSION,\r\n\r\n  // ssr codegen\r\n  JS_BLOCK_STATEMENT,\r\n  JS_TEMPLATE_LITERAL,\r\n  JS_IF_STATEMENT,\r\n  JS_ASSIGNMENT_EXPRESSION,\r\n  JS_SEQUENCE_EXPRESSION,\r\n  JS_RETURN_STATEMENT,\r\n}\r\n\r\nexport function createCallExpression(context, args) {\r\n  let callee = context.helper(CREATE_TEXT);\r\n  return {\r\n    callee,\r\n    type: NodeTypes.JS_CACHE_EXPRESSION,\r\n    arguments: args,\r\n  };\r\n}\r\n\r\nexport function createObjectExpression(properties) {\r\n  return {\r\n    type: NodeTypes.JS_OBJECT_EXPRESSION,\r\n    properties,\r\n  };\r\n}\r\n\r\nexport function createVNodeCall(\r\n  context,\r\n  vnodeTag,\r\n  propsExpression,\r\n  childrenNode\r\n) {\r\n  context.helper(CREATE_ELEMENT_VNODE);\r\n  return {\r\n    type: NodeTypes.VNODE_CALL,\r\n    tag: vnodeTag,\r\n    props: propsExpression,\r\n    children: childrenNode,\r\n  };\r\n}\r\n", "import { NodeTypes } from \"./ast\";\r\nimport { helperMap, TO_DISPLAY_STRING } from \"./runtimeHelpers\";\r\n\r\nfunction createCodegenContext(ast) {\r\n  const context = {\r\n    code: \"\",\r\n    helper(name) {\r\n      return `${helperMap[name]}`;\r\n    },\r\n    push(code) {\r\n      context.code += code;\r\n    },\r\n    indentLevel: 0,\r\n    indent() {\r\n      // \u5411\u540E\u7F29\u8FDB\r\n      ++context.indentLevel;\r\n      context.newline();\r\n    },\r\n    deIndent(withoutNewLine = false) {\r\n      // \u5411\u524D\u7F29\u8FDB\r\n      if (withoutNewLine) {\r\n        --context.indentLevel;\r\n      } else {\r\n        --context.indentLevel;\r\n        context.newline();\r\n      }\r\n    },\r\n    newline() {\r\n      // \u6839\u636EindentLevel\u6765\u751F\u6210\u65B0\u7684\u884C\r\n      newline(context.indentLevel);\r\n    },\r\n  };\r\n\r\n  function newline(n) {\r\n    context.push(\"\\n\" + \"  \".repeat(n));\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nfunction genFunctionPreface(ast, context) {\r\n  if (ast.helpers.length > 0) {\r\n    context.push(\r\n      `import {${ast.helpers\r\n        .map((h) => `${context.helper(h)} as _${context.helper(h)}`)\r\n        .join(\",\")}} from \"vue\"`\r\n    );\r\n    context.newline();\r\n  }\r\n\r\n  context.push(\"export \");\r\n}\r\n\r\nfunction genText(node, context) {\r\n  context.push(JSON.stringify(node.content));\r\n}\r\n\r\nfunction genInterpolation(node, context) {\r\n  context.push(`${helperMap[TO_DISPLAY_STRING]}(`);\r\n  genNode(node.content, context);\r\n  context.push(\")\");\r\n}\r\n\r\nfunction genExpression(node, context) {\r\n  context.push(node.content);\r\n}\r\n\r\nfunction genNode(node, context) {\r\n  switch (node.type) {\r\n    case NodeTypes.TEXT:\r\n      genText(node, context);\r\n      break;\r\n    case NodeTypes.INTERPOLATION:\r\n      genInterpolation(node, context);\r\n      break;\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      genExpression(node, context);\r\n      break;\r\n  }\r\n}\r\n\r\nexport function generate(ast) {\r\n  const context = createCodegenContext(ast);\r\n  const { push, indent, deIndent } = context;\r\n  genFunctionPreface(ast, context);\r\n\r\n  const functionName = \"render\";\r\n  const args = [\"_ctx\", \"_cache\", \"$props\"];\r\n\r\n  push(`function ${functionName}(${args.join(\",\")}){`);\r\n  indent();\r\n  push(\"return \");\r\n\r\n  if (ast.codegenNode) {\r\n    genNode(ast.codegenNode, context);\r\n  } else {\r\n    push(\"null\");\r\n  }\r\n  deIndent();\r\n  push(\"}\");\r\n  console.log(context.code);\r\n}\r\n", "import { NodeTypes } from \"./ast\";\r\n\r\n// \u521B\u5EFA\u4E0A\u4E0B\u6587\r\nfunction createParserContext(template) {\r\n  return {\r\n    line: 1,\r\n    column: 1,\r\n    offset: 0,\r\n    source: template, // \u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u89E3\u6790\r\n    originalSource: template,\r\n  };\r\n}\r\n\r\nfunction isEnd(context) {\r\n  const source = context.source;\r\n  if (source.startsWith(\"</\")) {\r\n    return true;\r\n  }\r\n  return !source;\r\n}\r\n\r\n// \u6839\u636E\u4E0A\u4E0B\u6587\u83B7\u53D6\u4F4D\u7F6E\u4FE1\u606F\r\nfunction getCursor(context) {\r\n  let { line, column, offset } = context;\r\n  return { line, column, offset };\r\n}\r\n\r\n// \u66F4\u65B0\u504F\u79FB\u91CF\u4FE1\u606F\r\nfunction advancePositionWithMutation(context, source, endIndex) {\r\n  let linesCount = 0;\r\n  let linePos = -1;\r\n  for (let i = 0; i < endIndex; i++) {\r\n    if (source.charCodeAt(i) === 10) {\r\n      linesCount++;\r\n      linePos = i;\r\n    }\r\n  }\r\n\r\n  context.line += linesCount;\r\n  context.offset += endIndex;\r\n  context.column =\r\n    linePos === -1 ? context.column + endIndex : endIndex - linePos;\r\n}\r\n\r\nfunction advanceBy(context, endIndex) {\r\n  let source = context.source;\r\n  // \u6BCF\u6B21\u5220\u6389\u5185\u5BB9\u7684\u65F6\u5019\u90FD\u8981\u66F4\u65B0\u884C\u5217\u4FE1\u606F\r\n  advancePositionWithMutation(context, source, endIndex);\r\n  context.source = source.slice(endIndex);\r\n}\r\n// \u5904\u7406\u6587\u672C\u5185\u5BB9\uFF0C\u5E76\u4E14\u4F1A\u66F4\u65B0\u6700\u65B0\u7684\u504F\u79FB\u91CF\u4FE1\u606F\r\nfunction parseTextData(context, endIndex) {\r\n  const rawText = context.source.slice(0, endIndex);\r\n  advanceBy(context, endIndex);\r\n  return rawText;\r\n}\r\n// \u83B7\u53D6\u5F53\u524D\u5F00\u5934\u548C\u7ED3\u5C3E\u7684\u4F4D\u7F6E\u4FE1\u606F\r\nfunction getSelection(context, start, end?) {\r\n  end = end || getCursor(context);\r\n\r\n  return {\r\n    start,\r\n    end,\r\n    source: context.originalSource.slice(start.offset, end.offset),\r\n  };\r\n}\r\n\r\n// \u6587\u672C\u5904\u7406\r\nfunction parseText(context) {\r\n  // \u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019\u8981\u770B\u5230\u54EA\u91CC\u7ED3\u675F\r\n  // abc<div> abc{{}}\r\n\r\n  let endTokens = [\"<\", \"{{\"];\r\n  let endIndex = context.source.length; // \u9ED8\u8BA4\u8BA4\u4E3A\u5230\u6700\u540E\u7ED3\u675F\r\n  for (let i = 0; i < endTokens.length; i++) {\r\n    let index = context.source.indexOf(endTokens[i], 1);\r\n    if (index !== -1 && endIndex > index) {\r\n      endIndex = index;\r\n    }\r\n  }\r\n\r\n  // \u521B\u5EFA\u884C\u5217\u4FE1\u606F\r\n  const start = getCursor(context);\r\n  // \u53D6\u5185\u5BB9\r\n  const content = parseTextData(context, endIndex);\r\n\r\n  return {\r\n    type: NodeTypes.TEXT,\r\n    content: content,\r\n    loc: getSelection(context, start),\r\n  };\r\n}\r\n\r\n// \u89E3\u6790\u8868\u8FBE\u5F0F\r\nfunction parseInterpolation(context) {\r\n  const start = getCursor(context); // {{ xxx }}\r\n  // \u67E5\u627E\u7ED3\u675F\u7684\u5927\u62EC\u53F7\r\n  const closeIndex = context.source.indexOf(\"}}\", \"{{\".length);\r\n  advanceBy(context, 2); //   xxx  }}\r\n  const innerStart = getCursor(context);\r\n  const innerEnd = getCursor(context);\r\n\r\n  // \u62FF\u5230\u539F\u59CB\u7684\u5185\u5BB9\r\n  const rawContentLength = closeIndex - 2; // \u539F\u59CB\u5185\u5BB9\u7684\u957F\u5EA6\r\n  let preContent = parseTextData(context, rawContentLength); // }} \u8FD4\u56DE\u6587\u672C\u5185\u5BB9\uFF0C\u5E76\u66F4\u65B0\u4FE1\u606F\r\n  let content = preContent.trim();\r\n  let startOffset = preContent.indexOf(content);\r\n  if (startOffset > 0) {\r\n    advancePositionWithMutation(innerStart, preContent, startOffset);\r\n  }\r\n\r\n  let endOffset = startOffset + content.length;\r\n  advancePositionWithMutation(innerEnd, preContent, endOffset);\r\n\r\n  advanceBy(context, 2);\r\n\r\n  return {\r\n    type: NodeTypes.INTERPOLATION,\r\n    content: {\r\n      type: NodeTypes.SIMPLE_EXPRESSION,\r\n      content,\r\n      loc: getSelection(context, innerStart, innerEnd),\r\n    },\r\n    loc: getSelection(context, start),\r\n  };\r\n}\r\n\r\nfunction advanceBySpaces(context) {\r\n  let match = /^[ \\t\\r\\n]+/.exec(context.source);\r\n  if (match) {\r\n    advanceBy(context, match[0].length);\r\n  }\r\n}\r\n\r\nfunction parseAttributeValue(context) {\r\n  const start = getCursor(context);\r\n  let quote = context.source[0];\r\n  let content;\r\n  if (quote === '\"' || quote === \"'\") {\r\n    advanceBy(context, 1);\r\n    const endIndex = context.source.indexOf(quote);\r\n    content = parseTextData(context, endIndex);\r\n    advanceBy(context, 1);\r\n  }\r\n  return {\r\n    content,\r\n    loc: getSelection(context, start),\r\n  };\r\n}\r\n\r\nfunction parseAttribute(context) {\r\n  const start = getCursor(context);\r\n  // \u5C5E\u6027\u7684\u540D\u5B57\r\n  const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n  let name = match[0];\r\n  advanceBy(context, name.length);\r\n  advanceBySpaces(context);\r\n  advanceBy(context, 1);\r\n  let value = parseAttributeValue(context);\r\n\r\n  const loc = getSelection(context, start);\r\n  return {\r\n    type: NodeTypes.ATTRIBUTE,\r\n    name,\r\n    value: {\r\n      type: NodeTypes.TEXT,\r\n      ...value,\r\n    },\r\n    loc,\r\n  };\r\n}\r\n\r\nfunction parseAttributes(context) {\r\n  const props = [];\r\n\r\n  while (context.source.length > 0 && !context.source.startsWith(\">\")) {\r\n    const prop = parseAttribute(context);\r\n    props.push(prop);\r\n    advanceBySpaces(context);\r\n  }\r\n\r\n  return props;\r\n}\r\n\r\nfunction parseTag(context) {\r\n  const start = getCursor(context);\r\n  const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source);\r\n  const tag = match[1];\r\n  advanceBy(context, match[0].length);\r\n  advanceBySpaces(context);\r\n\r\n  let props = parseAttributes(context);\r\n\r\n  let isSelfClosing = context.source.startsWith(\"/>\");\r\n  advanceBy(context, isSelfClosing ? 2 : 1);\r\n\r\n  return {\r\n    type: NodeTypes.ELEMENT,\r\n    tag: tag,\r\n    isSelfClosing,\r\n    children: [],\r\n    props,\r\n    loc: getSelection(context, start),\r\n  };\r\n}\r\n\r\n// \u89E3\u6790\u6807\u7B7E\r\nfunction parseElement(context) {\r\n  // <br/> <div a=\"1\"></div>\r\n  let ele = parseTag(context);\r\n\r\n  // \u513F\u5B50\r\n  let children = parseChildren(context);\r\n\r\n  if (context.source.startsWith(\"</\")) {\r\n    parseTag(context);\r\n  }\r\n  ele.loc = getSelection(context, ele.loc.start);\r\n  ele.children = children;\r\n  return ele;\r\n}\r\n\r\nexport function parse(template) {\r\n  // \u521B\u5EFA\u89E3\u6790\u4E0A\u4E0B\u6587\r\n  const context = createParserContext(template);\r\n\r\n  // < \u5143\u7D20\r\n  // {{}} \u8868\u8FBE\u5F0F\r\n  // \u5176\u4ED6\u5C31\u662F\u6587\u672C\r\n  const start = getCursor(context);\r\n  return createRoot(parseChildren(context), getSelection(context, start));\r\n}\r\n\r\nfunction createRoot(children, loc) {\r\n  return {\r\n    type: NodeTypes.ROOT,\r\n    children,\r\n    loc,\r\n  };\r\n}\r\n\r\nfunction parseChildren(context) {\r\n  const nodes = [];\r\n  while (!isEnd(context)) {\r\n    const source = context.source;\r\n    let node;\r\n    if (source.startsWith(\"{{\")) {\r\n      node = parseInterpolation(context);\r\n    } else if (source[0] === \"<\") {\r\n      node = parseElement(context);\r\n    }\r\n\r\n    if (!node) {\r\n      node = parseText(context);\r\n    }\r\n\r\n    nodes.push(node);\r\n  }\r\n  nodes.forEach((node, i) => {\r\n    if (node.type === NodeTypes.TEXT) {\r\n      if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n        nodes[i] = null;\r\n      }\r\n    }\r\n  });\r\n  return nodes.filter(Boolean);\r\n}\r\n", "import { createObjectExpression, createVNodeCall, NodeTypes } from \"../ast\";\r\n\r\nexport function transformElement(node, context) {\r\n  // \u6211\u4EEC\u671F\u671B\u5143\u7D20\u6240\u6709\u513F\u5B50\u5904\u7406\u5B8C\u6210\u540E\u91CD\u65B0\u6DFB\u52A0\u5230children\u4E2D\r\n  if (node.type === NodeTypes.ELEMENT) {\r\n    return () => {\r\n      let vnodeTag = `\"${node.tag}\"`;\r\n\r\n      let properties = [];\r\n\r\n      let props = node.props;\r\n      for (let i = 0; i < props.length; i++) {\r\n        properties.push({\r\n          key: props[i].name,\r\n          value: props[i].value.content,\r\n        });\r\n      }\r\n\r\n      // \u521B\u5EFA\u4E00\u4E2A\u5C5E\u6027\u8868\u8FBE\u5F0F\r\n      const propsExpression =\r\n        properties.length > 0 ? createObjectExpression(properties) : null;\r\n\r\n      // \u9700\u8981\u8003\u8651\u5B69\u5B50\u7684\u60C5\u51B5\r\n      let childrenNode = null;\r\n      if (node.children.length === 1) {\r\n        childrenNode = node.children[0];\r\n      } else if (node.children.length > 1) {\r\n        childrenNode = node.children;\r\n      }\r\n      // createElementVNode()\r\n      node.codegenNode = createVNodeCall(\r\n        context,\r\n        vnodeTag,\r\n        propsExpression,\r\n        childrenNode\r\n      );\r\n    };\r\n  }\r\n}\r\n", "import { NodeTypes } from \"../ast\";\r\n\r\nexport function transformExpression(node, context) {\r\n  if (node.type === NodeTypes.INTERPOLATION) {\r\n    let content = node.content.content;\r\n    node.content.content = `_ctx.${content}`;\r\n  }\r\n}\r\n", "export const isObject = (value) => {\r\n  return typeof value === \"object\" && value !== null;\r\n};\r\n\r\nexport const isString = (value) => {\r\n  return typeof value === \"string\";\r\n};\r\n\r\nexport const isNumber = (value) => {\r\n  return typeof value === \"number\";\r\n};\r\n\r\nexport const isFunction = (value) => {\r\n  return typeof value === \"function\";\r\n};\r\n\r\nexport const isArray = Array.isArray;\r\nexport const assign = Object.assign;\r\n\r\nexport const invokeArrayFns = (fns) => {\r\n  for (let i = 0; i < fns.length; i++) {\r\n    fns[i]();\r\n  }\r\n};\r\n\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nexport enum ShapeFlags {\r\n  ELEMENT = 1,\r\n  FUNCTIONAL_COMPONENT = 1 << 1,\r\n  STATEFUL_COMPONENT = 1 << 2,\r\n  TEXT_CHILDREN = 1 << 3,\r\n  ARRAY_CHILDREN = 1 << 4,\r\n  SLOTS_CHILDREN = 1 << 5,\r\n  TELEPORT = 1 << 6,\r\n  SUSPENSE = 1 << 7,\r\n  COMPONENT_SHOULD_KEEP_ALIVE = 1 << 8,\r\n  COMPONENT_KEPT_ALIVE = 1 << 9,\r\n  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT,\r\n}\r\n\r\nexport enum PatchFlags {\r\n  TEXT = 1, // \u52A8\u6001\u6587\u672C\u8282\u70B9\r\n  CLASS = 1 << 1, // \u52A8\u6001class\r\n  STYLE = 1 << 2, // \u52A8\u6001style\r\n  PROPS = 1 << 3, // \u9664\u4E86class/style\u7684\u52A8\u6001\u5C5E\u6027\r\n  FULL_PROPS = 1 << 4, // \u6709key\uFF0C\u9700\u8981\u5B8C\u6574diff\r\n  NEED_HYDRATION = 1 << 5, // \u6302\u8F7D\u8FC7\u4E8B\u4EF6\u7684\r\n  STABLE_FRAGMENT = 1 << 6, // \u7A33\u5B9A\u5E8F\u5217\uFF0C\u5B50\u8282\u70B9\u987A\u5E8F\u4E0D\u4F1A\u53D1\u751F\u53D8\u5316\r\n  KEYED_FRAGMENT = 1 << 7, // \u5B50\u8282\u70B9\u6709key\u7684fragment\r\n  UNKEYED_FRAGMENT = 1 << 8, // \u5B50\u8282\u70B9\u6CA1\u6709key\u7684fragment\r\n  NEED_PATCH = 1 << 9, // \u8FDB\u884C\u975Eprops\u6BD4\u8F83\uFF0Cref\u6BD4\u8F83\r\n  DYNAMIC_SLOTS = 1 << 10, // \u52A8\u6001\u63D2\u69FD\r\n  DEV_ROOT_FRAGMENT = 1 << 11, //\r\n  CACHED = -1, // \u8868\u793A\u9759\u6001\u8282\u70B9\uFF0C\u5185\u5BB9\u53D8\u5316\uFF0C\u4E0D\u6BD4\u8F83\u513F\u5B50\r\n  BAIL = -2, // \u8868\u793Adiff\u7B97\u6CD5\u5E94\u8BE5\u7ED3\u675F\r\n}\r\n", "import { Text } from \"./../../../runtime-core/src/vnode\";\r\nimport { createCallExpression, NodeTypes } from \"../ast\";\r\nimport { PatchFlags } from \"@my-vue/shared\";\r\n\r\nexport function isText(node) {\r\n  return node.type === NodeTypes.INTERPOLATION || node.type === NodeTypes.TEXT;\r\n}\r\n\r\nexport function transformText(node, context) {\r\n  // \u9700\u8981\u9700\u8981\u5143\u7D20\u7684\u65F6\u5019\u624D\u80FD\u5904\u7406\u591A\u4E2A\u5B50\u8282\u70B9\r\n  if (node.type === NodeTypes.ELEMENT || node.type === NodeTypes.ROOT) {\r\n    return () => {\r\n      // {{aaa}} abc => \u7EC4\u5408\u8868\u8FBE\u5F0F COMPOUND_EXPRESSION\r\n      // ast\u8BED\u6CD5\u6811\u4E2D\u662F\u4E24\u4E2A\u8282\u70B9\uFF0C\u9700\u8981\u7EC4\u5408\u5230\u4E00\u8D77\u6210\u4E3A\u4E00\u4E2A\u6587\u672C\u8282\u70B9\r\n      // \u67E5\u627E\u8FDE\u7EED\u7684\u8868\u8FBE\u5F0F\u548C\u6587\u672C\u5C06\u5B83\u4EEC\u62FC\u63A5\r\n      let currentContainer = null;\r\n      let children = node.children;\r\n      let hasText = false;\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i]; // \u62FF\u5230\u7B2C\u4E00\u4E2A\u5B69\u5B50\r\n        hasText = true;\r\n        if (isText(child)) {\r\n          // \u770B\u4E0B\u4E00\u4E2A\u8282\u70B9\u662F\u4E0D\u662F\u6587\u672C\r\n          for (let j = i + 1; j < children.length; j++) {\r\n            const next = children[j];\r\n            if (isText(next)) {\r\n              if (!currentContainer) {\r\n                currentContainer = children[i] = {\r\n                  type: NodeTypes.COMPOUND_EXPRESSION,\r\n                  children: [child],\r\n                };\r\n              }\r\n              currentContainer.children.push(`+`, next);\r\n              children.splice(j, 1);\r\n              j--;\r\n            } else {\r\n              currentContainer = null;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // \u5982\u679C\u53EA\u6709\u4E00\u4E2A\u8282\u70B9\uFF0C\u5219\u76F4\u63A5\u63D2\u5165\u5143\u7D20\r\n      if (hasText && children.length === 1) {\r\n        return;\r\n      }\r\n\r\n      // \u9700\u8981\u7ED9\u591A\u4E2A\u513F\u5B50\u4E2D\u521B\u5EFA\u6587\u672C\u8282\u70B9\u6DFB\u52A0 patchFlag\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        const callArgs = [];\r\n        if (isText(child) || child.type === NodeTypes.COMPOUND_EXPRESSION) {\r\n          callArgs.push(child);\r\n          if (node.type !== NodeTypes.TEXT) {\r\n            // \u52A8\u6001\u8282\u70B9\r\n            callArgs.push(PatchFlags.TEXT);\r\n          }\r\n          children[i] = {\r\n            type: NodeTypes.TEXT_CALL, // \u901A\u8FC7createTextVnode\u6765\u5B9E\u73B0\r\n            content: child,\r\n            codegenNode: createCallExpression(context, callArgs),\r\n          };\r\n        }\r\n      }\r\n      // \u5143\u7D20\u91CC\u6709\u4E00\u4E2A\u6587\u672C{{aa}} \u6807\u8BC6\u4F4D\uFF08patchFlag\uFF09\u5E94\u8BE5\u662F\u4E00\u4E2A\u6587\u672C\r\n    };\r\n  }\r\n}\r\n", "import { createVNodeCall, NodeTypes } from \"./ast\";\r\nimport {\r\n  CREATE_ELEMENT_BLOCK,\r\n  CREATE_ELEMENT_VNODE,\r\n  FRAGMENT,\r\n  OPEN_BLOCK,\r\n  TO_DISPLAY_STRING,\r\n} from \"./runtimeHelpers\";\r\nimport { transformElement } from \"./transforms/transformElement\";\r\nimport { transformExpression } from \"./transforms/transformExpression\";\r\nimport { transformText } from \"./transforms/transformText\";\r\n\r\nfunction createTransformContext(root) {\r\n  const context = {\r\n    currentNode: root, // \u5F53\u524D\u6B63\u5728\u8F6C\u5316\u7684\u8282\u70B9\r\n    parent: null, // \u5F53\u524D\u8F6C\u5316\u7684\u7236\u8282\u70B9\r\n    helpers: new Map(), // \u4F18\u5316\uFF0C\u8D85\u8FC720\u4E2A\u76F8\u540C\u7684\u8282\u70B9\u4F1A\u88AB\u5B57\u7B26\u4E32\u5316\r\n    helper(name) {\r\n      // \u6839\u636E\u4F7F\u7528\u8FC7\u7684\u65B9\u6CD5\u8FDB\u884C\u4F18\u5316\r\n      const count = context.helpers.get(name) || 0;\r\n      context.helpers.set(name, count + 1);\r\n      return name;\r\n    },\r\n    removeHelper(name) {\r\n      const count = context.helpers.get(name);\r\n      if (count) {\r\n        const currentCount = count - 1;\r\n        if (!currentCount) {\r\n          context.helpers.delete(name);\r\n        } else {\r\n          context.helpers.set(name, currentCount);\r\n        }\r\n      }\r\n    },\r\n    nodeTransforms: [transformElement, transformText, transformExpression],\r\n  };\r\n  return context;\r\n}\r\n\r\nfunction traverse(node, context) {\r\n  context.currentNode = node;\r\n  const transforms = context.nodeTransforms;\r\n  const exitsFns = [];\r\n  for (let i = 0; i < transforms.length; i++) {\r\n    let onExit = transforms[i](node, context); // \u5728\u6267\u884C\u7684\u65F6\u5019\uFF0C\u6709\u53EF\u80FD\u88AB\u5220\u9664\u4E86\r\n    if (onExit) exitsFns.push(onExit);\r\n    if (!context.currentNode) return; // \u5982\u679C\u5F53\u524D\u8282\u70B9\u88AB\u5220\u9664\u4E86\uFF0C\u5C31\u4E0D\u8003\u8651\u513F\u5B50\r\n  }\r\n  switch (node.type) {\r\n    case NodeTypes.INTERPOLATION:\r\n      // \u5B8F \u5E38\u91CF\r\n      context.helper(TO_DISPLAY_STRING);\r\n      break;\r\n    case NodeTypes.ELEMENT:\r\n    case NodeTypes.ROOT:\r\n      for (let i = 0; i < node.children.length; i++) {\r\n        context.parent = node;\r\n        traverse(node.children[i], context);\r\n      }\r\n  }\r\n  // \u5F53\u6267\u884C\u9000\u51FA\u51FD\u6570\u7684\u65F6\u5019\u4FDD\u8BC1currentNode\u7684\u6307\u5411\u662F\u5BF9\u7684\r\n  context.currentNode = node;\r\n  let i = exitsFns.length;\r\n  while (i--) {\r\n    exitsFns[i]();\r\n  }\r\n}\r\n\r\nfunction createRootCodegen(ast, context) {\r\n  let { children } = ast;\r\n\r\n  if (children.length === 1) {\r\n    const child = children[0];\r\n    // \u5143\u7D20\r\n    if (child.type === NodeTypes.ELEMENT && child.codegenNode) {\r\n      ast.codegenNode = child.codegenNode;\r\n      // \u8C03\u7528 openBlock createElementBlock\r\n      context.removeHelper(CREATE_ELEMENT_VNODE);\r\n      context.helper(OPEN_BLOCK);\r\n      context.helper(CREATE_ELEMENT_BLOCK);\r\n      ast.codegenNode.isBlock = true; // \u53EA\u6709\u4E00\u4E2A\u5143\u7D20\uFF0C\u5F53\u524D\u5143\u7D20\u662Fblock\u8282\u70B9\uFF0C\u5E76\u4E14\u4F7F\u7528\u7684\u662FcreateElementBlock\r\n    } else {\r\n      ast.codegenNode = child;\r\n    }\r\n  } else {\r\n    if (children.length === 0) return;\r\n    ast.codegenNode = createVNodeCall(\r\n      context,\r\n      context.helper(FRAGMENT),\r\n      null,\r\n      children\r\n    );\r\n    context.helper(OPEN_BLOCK);\r\n    context.helper(CREATE_ELEMENT_BLOCK);\r\n    ast.codegenNode.isBlock = true;\r\n  }\r\n}\r\n\r\nexport function transform(ast) {\r\n  const context = createTransformContext(ast);\r\n  traverse(ast, context);\r\n  createRootCodegen(ast, context);\r\n  ast.helpers = [...context.helpers.keys()];\r\n}\r\n"],
  "mappings": "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",
  "names": ["i"]
}
